### Authentication ### 
POST auth/register   register a new user
REQUEST BODY
{
  userName*         string    user first name
  emaile*           string    email address
  password*         string    password must contain only alphabet
  confirmPassword*  string    confirm password must match a password
}
RESPONSE
201
  {
    accessToken     string    user token
    newUser         object    user object without password
  }
400 {message         string    client error message}
500 {message         string    server error message}




POST auth/login login
REQUESY BODY 
{
      emaile*       string    email address
    password*       string    password must contain only alphabet
}
RESPONSE
200
  {
    accessToken     string    user token
    user            object    user object without password
  }
400
  {
    message         string    client error message
  }
500

  {
    message         string    server error message
  }


GET user/:userId






POST collection/:userId/createcollection    created collection
HEADER
  AUTHORIZATION           Bearer [JWT]
BODY
{
   name         String       name of createcollection
   description  string  
   trait        array        array of traits object
}
RESPONSE
    200 { 
    collection  object 
    trait       array
        }
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error' }




POST /assets/:userId/create  create NFT
REQUEST
HEADER
  AUTHORIZATION           Bearer [JWT]
BODY
{
   collectionName  String
   name            String 
   trait           array      traits object {traits: trait's attribute}
}
RESPONSE
  200 { 
        nft         object 
        triats      array     object of traits
      }
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error' }



PATCH collection/:userId/:collectionId/startmint          put collection on mint
HEADER
  AUTHORIZATION           Bearer [JWT]
REPONSE
  200 { message: 'start mint collection'}
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error' }


PATCH collection/:userId/:collectionId/mint       mintnft
HEADER
  AUTHORIZATION           Bearer [JWT]
REPONSE
  200 { message: 'mint success'}
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error' }


POST assets/:userId/:nftId/sell       put nft on sale list
HEADER
  AUTHORIZATION           Bearer [JWT]
BODY
{
   price  Decimal  number with  2digi
}
REPONSE
  200 { message: 'sales success'}
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error' }


  PATCH assets/:userId/:nftId/update      update price nft
HEADER
  AUTHORIZATION           Bearer [JWT]
BODY
{
   new price    Decimal  number with  2digi
}
REPONSE
  200 { message: 'update success'}
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error' }




DELETE assets/:userId/:nftId/cancel       cancel nft from sale list
HEADER
  AUTHORIZATION           Bearer [JWT]
REPONSE
  200 { message: 'delete success'}
  401 { message: 'unauthenticated' }
  500 { message: 'internal server error'}



POST assets/:userId/:nftId/buy      buy NFT from sale list
HEADER
  AUTHORIZATION           Bearer [JWT]
REPONSE
  200 { message: 'buy success'}
  401 { message: 'unauthenticated' }
  402 { message: 'not enough balance' }
  500 { message: 'internal server error'}


PATCH user/:userId/profile     Update profile
HEADER
  AUTHORIZATION           Bearer [JWT]
BODY
{
    userName?        String
    email?           String
    bio?             String
    twitterUrl?      String
}
REPONSE
  200 
  {
    user            object
    accessToken     String
  }
  401 { message: 'unauthenticated' }
  405 { message: 'userName or Email is already in used'}
  500 { message: 'internal server error'}




POST user/:userId/connectwallet    connectwallet
HEADER 
AUTHORIZATION Bearer [JWT]
BODY
{
    walletAddress   string wallet address
}
RESPONSE
200 {
    wallet      String    walletaddress
    user        object    user object without password
}
401  { message: 'unauthenticated' }
500  { message: 'internal server errro' }